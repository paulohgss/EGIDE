<<<<<<< HEAD
Onboarding: Projeto Égide Jurídico

1. Visão Geral:

Nome: Égide Jurídico
Visão: Revolucionar a prática da advocacia no Brasil, criando uma plataforma completa e integrada que automatiza tarefas, otimiza a gestão e utiliza inteligência artificial para auxiliar advogados desde a triagem inicial até a conclusão do caso.
Público-Alvo: Escritórios de advocacia brasileiros, com foco inicial na área de Direito Previdenciário. O sistema é projetado para ser usado por advogados e suas equipes (assistentes, recepcionistas), com diferentes níveis de acesso e permissão.
Problema a Resolver: Reduzir tarefas repetitivas e manuais, minimizar erros humanos, economizar tempo, facilitar a organização de informações e documentos, simplificar a delegação de tarefas e potencializar a análise de casos com o auxílio de IA.
2. Funcionalidades Principais (Planejadas/Discutidas):

Gerenciamento de Clientes e Casos: Cadastro de clientes, criação automática de estrutura de pastas por caso (Escritorio/Clientes/ClienteCPF/Caso).
Gestão de Documentos: Upload de documentos (PDFs, inicialmente) diretamente pela plataforma, vinculados ao cliente/caso correto.
Visualização Integrada: Acesso e visualização de documentos e relatórios diretamente na interface do Égide.
Extração de Texto (OCR): Processamento automático de PDFs no momento do upload para extrair todo o texto contido neles.
Geração de Relatórios com IA: Funcionalidade (acionada manualmente por botão) para enviar o texto extraído de um documento (ou um conjunto de documentos de um caso) para a API da OpenAI (GPT-4 Turbo) e gerar relatórios jurídicos estruturados (foco inicial em previdenciário).
Editor de Texto Integrado: Capacidade de criar e editar documentos de texto (ex: petições, recursos) dentro da plataforma, associados ao caso.
Sistema Multi-Tenant: Arquitetura que permite que múltiplos escritórios usem o sistema de forma independente e segura, com login próprio e controle de acesso granular para diferentes usuários dentro do escritório.
(Visão Futura/Mencionadas): Transcrição de áudios de atendimento, gerenciamento de agenda/prazos/tarefas, chatbot/assistente IA para sugestões estratégicas, fluxos de trabalho guiados.
3. Arquitetura e Tecnologia (Decisões Atuais):

Tipo de Aplicação: Aplicação Web, acessível via navegador.
Componentes: Frontend (interface do usuário) e Backend (lógica do servidor).
Abordagem Descartada: O uso de Google Apps Script como motor principal foi descartado em favor de uma implementação no backend da aplicação web.
Responsabilidades do Backend:
Gerenciar a lógica de negócios (autenticação, permissões, fluxo de trabalho).
Processar uploads de arquivos.
Interagir com o sistema de armazenamento de arquivos escolhido.
Orquestrar chamadas para APIs externas:
Serviço de OCR (ex: Google Cloud Vision API) para extração de texto.
API da OpenAI para geração de relatórios.
Gerenciar o banco de dados da aplicação.
Armazenamento de Arquivos: A ser definido (opções incluem Google Drive API com Service Account, AWS S3, Azure Blob Storage, etc.), mas o acesso deve ser transparente para o usuário através da plataforma.
Banco de Dados: A ser definido (para armazenar dados de usuários, clientes, casos, metadados de documentos, textos OCR, relatórios IA, etc.).
4. Status Atual (em 30/04/2025):

A visão geral e o fluxo principal de trabalho estão definidos.
Um protótipo conceitual de parte do fluxo (OCR de PDF + Relatório IA) existe no formato de um script Google Apps Script (analisado, mas não será usado diretamente).
Um repositório foi criado no GitHub: https://github.com/paulohgss/EGIDE-JURIDICO.
A decisão estratégica de construir como uma aplicação web (Backend/Frontend) foi tomada.
5. Próximos Passos Imediatos (Sugestões):

Definir Pilares Técnicos: Escolher as tecnologias concretas para Backend (linguagem/framework), Frontend, Banco de Dados e Armazenamento de Arquivos.
Iniciar Desenvolvimento (Backend): Começar a implementação do módulo de processamento de documentos no backend:
Criar o endpoint para receber upload de PDF.
Implementar a lógica de armazenamento do arquivo.
Integrar a chamada à API de OCR após o upload.
Salvar o texto extraído no banco de dados.
Criar o endpoint para acionar a geração de relatório IA (chamando a OpenAI).
Salvar o relatório gerado.
=======
Onboarding: Projeto Égide Jurídico

1. Visão Geral:

Nome: Égide Jurídico
Visão: Revolucionar a prática da advocacia no Brasil, criando uma plataforma completa e integrada que automatiza tarefas, otimiza a gestão e utiliza inteligência artificial para auxiliar advogados desde a triagem inicial até a conclusão do caso.
Público-Alvo: Escritórios de advocacia brasileiros, com foco inicial na área de Direito Previdenciário. O sistema é projetado para ser usado por advogados e suas equipes (assistentes, recepcionistas), com diferentes níveis de acesso e permissão.
Problema a Resolver: Reduzir tarefas repetitivas e manuais, minimizar erros humanos, economizar tempo, facilitar a organização de informações e documentos, simplificar a delegação de tarefas e potencializar a análise de casos com o auxílio de IA.
2. Funcionalidades Principais (Planejadas/Discutidas):

Gerenciamento de Clientes e Casos: Cadastro de clientes, criação automática de estrutura de pastas por caso (Escritorio/Clientes/ClienteCPF/Caso).
Gestão de Documentos: Upload de documentos (PDFs, inicialmente) diretamente pela plataforma, vinculados ao cliente/caso correto.
Visualização Integrada: Acesso e visualização de documentos e relatórios diretamente na interface do Égide.
Extração de Texto (OCR): Processamento automático de PDFs no momento do upload para extrair todo o texto contido neles.
Geração de Relatórios com IA: Funcionalidade (acionada manualmente por botão) para enviar o texto extraído de um documento (ou um conjunto de documentos de um caso) para a API da OpenAI (GPT-4 Turbo) e gerar relatórios jurídicos estruturados (foco inicial em previdenciário).
Editor de Texto Integrado: Capacidade de criar e editar documentos de texto (ex: petições, recursos) dentro da plataforma, associados ao caso.
Sistema Multi-Tenant: Arquitetura que permite que múltiplos escritórios usem o sistema de forma independente e segura, com login próprio e controle de acesso granular para diferentes usuários dentro do escritório.
(Visão Futura/Mencionadas): Transcrição de áudios de atendimento, gerenciamento de agenda/prazos/tarefas, chatbot/assistente IA para sugestões estratégicas, fluxos de trabalho guiados.
3. Arquitetura e Tecnologia (Decisões Atuais):

Tipo de Aplicação: Aplicação Web, acessível via navegador.
Componentes: Frontend (interface do usuário) e Backend (lógica do servidor).
Abordagem Descartada: O uso de Google Apps Script como motor principal foi descartado em favor de uma implementação no backend da aplicação web.
Responsabilidades do Backend:
Gerenciar a lógica de negócios (autenticação, permissões, fluxo de trabalho).
Processar uploads de arquivos.
Interagir com o sistema de armazenamento de arquivos escolhido.
Orquestrar chamadas para APIs externas:
Serviço de OCR (ex: Google Cloud Vision API) para extração de texto.
API da OpenAI para geração de relatórios.
Gerenciar o banco de dados da aplicação.
Armazenamento de Arquivos: A ser definido (opções incluem Google Drive API com Service Account, AWS S3, Azure Blob Storage, etc.), mas o acesso deve ser transparente para o usuário através da plataforma.
Banco de Dados: A ser definido (para armazenar dados de usuários, clientes, casos, metadados de documentos, textos OCR, relatórios IA, etc.).
4. Status Atual (em 30/04/2025):

A visão geral e o fluxo principal de trabalho estão definidos.
Um protótipo conceitual de parte do fluxo (OCR de PDF + Relatório IA) existe no formato de um script Google Apps Script (analisado, mas não será usado diretamente).
Um repositório foi criado no GitHub: https://github.com/paulohgss/EGIDE-JURIDICO.
A decisão estratégica de construir como uma aplicação web (Backend/Frontend) foi tomada.
5. Próximos Passos Imediatos (Sugestões):

Definir Pilares Técnicos: Escolher as tecnologias concretas para Backend (linguagem/framework), Frontend, Banco de Dados e Armazenamento de Arquivos.
Iniciar Desenvolvimento (Backend): Começar a implementação do módulo de processamento de documentos no backend:
Criar o endpoint para receber upload de PDF.
Implementar a lógica de armazenamento do arquivo.
Integrar a chamada à API de OCR após o upload.
Salvar o texto extraído no banco de dados.
Criar o endpoint para acionar a geração de relatório IA (chamando a OpenAI).
Salvar o relatório gerado.
>>>>>>> eeb9824b527f77365a5e190fc17e921f104b212c
Configurar Ambiente de Desenvolvimento: Preparar o ambiente local para codificar, testar e (eventualmente) configurar o Git neste computador para versionar o código no repositório existente.