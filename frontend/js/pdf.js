// pdf.js - Fun√ß√£o para gerar PDF do Hist√≥rico da Conversa
import { AppState } from './state.js';
import { showError } from './ui.js';
import { i18nInstance } from './i18n.js';

/**
 * Gera e baixa um arquivo PDF contendo o hist√≥rico da conversa dos bots.
 * Remove emojis dos prefixos dos bots para evitar problemas de renderiza√ß√£o/codifica√ß√£o no PDF.
 */
export function downloadConversationAsPdf() {
    // Verifica se a biblioteca jsPDF est√° carregada
    if (typeof window.jspdf === 'undefined' || typeof window.jspdf.jsPDF === 'undefined') {
        showError("errorPdfLibNotLoaded"); // Chave i18n para erro
        console.error("jsPDF n√£o est√° definida globalmente.");
        return;
    }
    const { jsPDF } = window.jspdf;

    // Inicializa o documento PDF (A4, retrato, unidades em pontos)
    const doc = new jsPDF({
        orientation: 'p',
        unit: 'pt',
        format: 'a4'
    });

    // Pega o hist√≥rico completo do estado da aplica√ß√£o
    const conversationHistory = AppState.historicoConversa;

    // Verifica se h√° hist√≥rico para processar
    if (!conversationHistory || conversationHistory.trim() === "") {
        console.warn("Tentativa de gerar PDF sem hist√≥rico de conversa.");
        showError("errorMessageDefault", "Nenhum hist√≥rico para gerar PDF."); // Chave i18n gen√©rica
        return;
    }

    // --- Configura√ß√µes de Layout e Fonte ---
    const margin = 40; // Margem em pontos (ajuste conforme necess√°rio)
    const pageInfo = doc.internal.pageSize;
    const pageWidth = pageInfo.getWidth();
    const pageHeight = pageInfo.getHeight();
    const usableWidth = pageWidth - margin * 2; // Largura √∫til real para o texto
    let cursorY = margin; // Posi√ß√£o vertical inicial (topo da p√°gina)

    // Define a fonte padr√£o - importante para consist√™ncia das m√©tricas
    doc.setFont('helvetica', 'normal'); // Usando uma fonte padr√£o segura
    doc.setFontSize(10); // Tamanho de fonte padr√£o para o conte√∫do

    // --- T√≠tulo do Documento ---
    doc.setFontSize(16); // Tamanho maior para o t√≠tulo
    doc.setFont('helvetica', 'bold'); // Negrito para o t√≠tulo
    const title = i18nInstance.t("pdfHistoryTitle", "Hist√≥rico da Conversa"); // Obt√©m t√≠tulo traduzido
    const splitTitle = doc.splitTextToSize(title, usableWidth); // Quebra t√≠tulo se for muito longo
    doc.text(splitTitle, margin, cursorY); // Adiciona o t√≠tulo ao PDF
    // Calcula a altura ocupada pelo t√≠tulo e adiciona espa√ßo
    cursorY += (splitTitle.length * doc.getTextDimensions(title).h * 1.2) + 10;
    doc.setFont('helvetica', 'normal'); // Volta para estilo normal
    doc.setFontSize(10); // Volta para tamanho padr√£o do conte√∫do

    // --- Processamento do Hist√≥rico da Conversa ---
    // Divide o hist√≥rico em entradas individuais baseado nos prefixos dos bots/usu√°rio
    // Regex: Procura por \n\n seguido por um dos emojis (lookahead positivo)
    const entries = conversationHistory.trim().split(/\n\n(?=[üë§ü©∫üìùüìäüßë‚Äç‚öñÔ∏è])/);

    for (const entry of entries) {
        if (!entry.trim()) continue; // Pula entradas vazias

        // Divide a entrada em linhas: primeira linha √© identifica√ß√£o, resto √© conte√∫do
        const lines = entry.split('\n');
        const botLineText = lines[0] || ""; // Linha de identifica√ß√£o (ex: "ü©∫ M√©dico:")
        const contentText = lines.slice(1).join('\n').trim(); // Conte√∫do da mensagem

        // Calcula a altura aproximada da linha para pagina√ß√£o
        const lineHeight = doc.getTextDimensions('M').h * 1.2; // Fator 1.2 para espa√ßamento entre linhas
        const botLineHeight = doc.getTextDimensions(botLineText).h * 1.2; // Altura para a linha de identifica√ß√£o

        // --- AJUSTE: Remover Emojis da Linha de Identifica√ß√£o ---
        // Regex para encontrar um dos emojis de bot/usu√°rio no in√≠cio da linha, seguido por espa√ßo opcional
        const emojiRegex = /^[üë§ü©∫üìùüìäüßë‚Äç‚öñÔ∏è]\s*/;
        // Cria uma vers√£o da linha de identifica√ß√£o SEM o emoji
        const cleanBotLineText = botLineText.replace(emojiRegex, '');
        // ------------------------------------------------------

        // --- Quebra de Linha (Wrapping) ---
        // Quebra a linha de identifica√ß√£o (J√Å SEM O EMOJI) se for muito longa
        const splitBotLine = doc.splitTextToSize(cleanBotLineText, usableWidth);
        // Quebra o conte√∫do principal da mensagem
        const splitContentLines = doc.splitTextToSize(contentText, usableWidth);

        // --- L√≥gica de Pagina√ß√£o (N√≠vel do Bloco) ---
        // Calcula a altura total estimada que este bloco (identifica√ß√£o + conte√∫do) ocupar√°
        const requiredHeight = (splitBotLine.length * botLineHeight) + (splitContentLines.length * lineHeight) + 10; // +10 para espa√ßo ap√≥s o bloco

        // Verifica se o bloco INTEIRO cabe na p√°gina atual ANTES de come√ßar a desenhar
        // Se n√£o couber E n√£o for o primeiro item na p√°gina, adiciona uma nova p√°gina
        if (cursorY > margin && (cursorY + requiredHeight) > (pageHeight - margin)) {
            doc.addPage(); // Adiciona nova p√°gina
            cursorY = margin; // Reseta o cursor para o topo da nova p√°gina
        }

        // --- Desenha a Linha de Identifica√ß√£o do Bot (Negrito e SEM Emoji) ---
        doc.setFont('helvetica', 'bold'); // Define negrito
        splitBotLine.forEach(line => { // Itera sobre as linhas quebradas da identifica√ß√£o (sem emoji)
            // Verifica√ß√£o de pagina√ß√£o INTRA-BLOCO (para cada linha da identifica√ß√£o)
            if (cursorY + botLineHeight > pageHeight - margin) {
                 // Adiciona nova p√°gina se esta linha espec√≠fica n√£o couber
                doc.addPage();
                cursorY = margin;
            }
            // Adiciona a linha (sem emoji) ao PDF
            doc.text(line, margin, cursorY);
            cursorY += botLineHeight; // Move o cursor para baixo
        });
        doc.setFont('helvetica', 'normal'); // Volta para estilo normal

        // --- Desenha o Conte√∫do da Mensagem ---
        splitContentLines.forEach(line => { // Itera sobre as linhas quebradas do conte√∫do
            // Verifica√ß√£o de pagina√ß√£o INTRA-BLOCO (para cada linha do conte√∫do)
             if (cursorY + lineHeight > pageHeight - margin) {
                doc.addPage(); // Adiciona nova p√°gina se esta linha n√£o couber
                cursorY = margin;
            }
            // Adiciona a linha de conte√∫do ao PDF
            doc.text(line, margin, cursorY);
            cursorY += lineHeight; // Move o cursor para baixo
        });

        cursorY += 10; // Adiciona um espa√ßo extra entre as entradas completas
    }

    // --- Salvamento do PDF ---
    try {
        // Gera um nome de arquivo com timestamp
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        doc.save(`historico_multibot_${timestamp}.pdf`); // Salva o arquivo
    } catch (error) {
        console.error("Erro ao salvar o PDF:", error);
        showError("errorMessageDefault", "Falha ao salvar o PDF."); // Chave i18n gen√©rica
    }
}